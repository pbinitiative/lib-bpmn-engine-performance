// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package main

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// Defines values for ProcessInstanceState.
const (
	Active     ProcessInstanceState = "active"
	Completed  ProcessInstanceState = "completed"
	Terminated ProcessInstanceState = "terminated"
)

// Activity defines model for Activity.
type Activity struct {
	BpmnElementType      *string    `json:"bpmnElementType,omitempty"`
	CreatedAt            *time.Time `json:"createdAt,omitempty"`
	ElementId            *string    `json:"elementId,omitempty"`
	Key                  *string    `json:"key,omitempty"`
	ProcessDefinitionKey *string    `json:"processDefinitionKey,omitempty"`
	ProcessInstanceKey   *string    `json:"processInstanceKey,omitempty"`
	State                *string    `json:"state,omitempty"`
}

// ActivityPage defines model for ActivityPage.
type ActivityPage struct {
	Count  *int        `json:"count,omitempty"`
	Items  *[]Activity `json:"items,omitempty"`
	Offset *int        `json:"offset,omitempty"`
	Size   *int        `json:"size,omitempty"`
}

// Job defines model for Job.
type Job struct {
	CreatedAt          *time.Time `json:"createdAt,omitempty"`
	ElementId          *string    `json:"elementId,omitempty"`
	ElementInstanceKey *string    `json:"elementInstanceKey,omitempty"`
	Key                *string    `json:"key,omitempty"`
	ProcessInstanceKey *string    `json:"processInstanceKey,omitempty"`
	State              *string    `json:"state,omitempty"`
}

// JobPage defines model for JobPage.
type JobPage struct {
	Count  *int   `json:"count,omitempty"`
	Items  *[]Job `json:"items,omitempty"`
	Offset *int   `json:"offset,omitempty"`
	Size   *int   `json:"size,omitempty"`
}

// PageMetadata defines model for PageMetadata.
type PageMetadata struct {
	Count  *int `json:"count,omitempty"`
	Offset *int `json:"offset,omitempty"`
	Size   *int `json:"size,omitempty"`
}

// ProcessDefinitionDetail defines model for ProcessDefinitionDetail.
type ProcessDefinitionDetail struct {
	BpmnData      *string `json:"bpmnData,omitempty"`
	BpmnProcessId *string `json:"bpmnProcessId,omitempty"`
	Key           *string `json:"key,omitempty"`
	Version       *int    `json:"version,omitempty"`
}

// ProcessDefinitionSimple defines model for ProcessDefinitionSimple.
type ProcessDefinitionSimple struct {
	BpmnProcessId *string `json:"bpmnProcessId,omitempty"`
	Key           *string `json:"key,omitempty"`
	Version       *int    `json:"version,omitempty"`
}

// ProcessDefinitionsPage defines model for ProcessDefinitionsPage.
type ProcessDefinitionsPage struct {
	Count  *int                       `json:"count,omitempty"`
	Items  *[]ProcessDefinitionSimple `json:"items,omitempty"`
	Offset *int                       `json:"offset,omitempty"`
	Size   *int                       `json:"size,omitempty"`
}

// ProcessInstance defines model for ProcessInstance.
type ProcessInstance struct {
	Activities           *string               `json:"activities,omitempty"`
	CaughtEvents         *string               `json:"caughtEvents,omitempty"`
	CreatedAt            *time.Time            `json:"createdAt,omitempty"`
	Key                  *string               `json:"key,omitempty"`
	ProcessDefinitionKey *string               `json:"processDefinitionKey,omitempty"`
	State                *ProcessInstanceState `json:"state,omitempty"`
	VariableHolder       *string               `json:"variableHolder,omitempty"`
}

// ProcessInstanceState defines model for ProcessInstance.State.
type ProcessInstanceState string

// ProcessInstancePage defines model for ProcessInstancePage.
type ProcessInstancePage struct {
	Count  *int               `json:"count,omitempty"`
	Items  *[]ProcessInstance `json:"items,omitempty"`
	Offset *int               `json:"offset,omitempty"`
	Size   *int               `json:"size,omitempty"`
}

// CompleteJobJSONBody defines parameters for CompleteJob.
type CompleteJobJSONBody struct {
	JobKey string `json:"jobKey"`
}

// CreateProcessInstanceJSONBody defines parameters for CreateProcessInstance.
type CreateProcessInstanceJSONBody struct {
	ProcessDefinitionKey string                  `json:"processDefinitionKey"`
	Variables            *map[string]interface{} `json:"variables,omitempty"`
}

// GetProcessInstancesParams defines parameters for GetProcessInstances.
type GetProcessInstancesParams struct {
	ProcessDefinitionKey *int64 `form:"processDefinitionKey,omitempty" json:"processDefinitionKey,omitempty"`
	Offset               *int   `form:"offset,omitempty" json:"offset,omitempty"`
	Size                 *int   `form:"size,omitempty" json:"size,omitempty"`
}

// CompleteJobJSONRequestBody defines body for CompleteJob for application/json ContentType.
type CompleteJobJSONRequestBody CompleteJobJSONBody

// CreateProcessInstanceJSONRequestBody defines body for CreateProcessInstance for application/json ContentType.
type CreateProcessInstanceJSONRequestBody CreateProcessInstanceJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CompleteJobWithBody request with any body
	CompleteJobWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CompleteJob(ctx context.Context, body CompleteJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProcessDefinitions request
	GetProcessDefinitions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProcessDefinitionWithBody request with any body
	CreateProcessDefinitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProcessDefinition request
	GetProcessDefinition(ctx context.Context, processDefinitionKey int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProcessInstanceWithBody request with any body
	CreateProcessInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProcessInstance(ctx context.Context, body CreateProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProcessInstances request
	GetProcessInstances(ctx context.Context, params *GetProcessInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProcessInstance request
	GetProcessInstance(ctx context.Context, processInstanceKey int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActivities request
	GetActivities(ctx context.Context, processInstanceKey int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobs request
	GetJobs(ctx context.Context, processInstanceKey int64, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CompleteJobWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteJobRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteJob(ctx context.Context, body CompleteJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteJobRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProcessDefinitions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProcessDefinitionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProcessDefinitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProcessDefinitionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProcessDefinition(ctx context.Context, processDefinitionKey int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProcessDefinitionRequest(c.Server, processDefinitionKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProcessInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProcessInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProcessInstance(ctx context.Context, body CreateProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProcessInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProcessInstances(ctx context.Context, params *GetProcessInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProcessInstancesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProcessInstance(ctx context.Context, processInstanceKey int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProcessInstanceRequest(c.Server, processInstanceKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActivities(ctx context.Context, processInstanceKey int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActivitiesRequest(c.Server, processInstanceKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobs(ctx context.Context, processInstanceKey int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobsRequest(c.Server, processInstanceKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCompleteJobRequest calls the generic CompleteJob builder with application/json body
func NewCompleteJobRequest(server string, body CompleteJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCompleteJobRequestWithBody(server, "application/json", bodyReader)
}

// NewCompleteJobRequestWithBody generates requests for CompleteJob with any type of body
func NewCompleteJobRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/jobs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProcessDefinitionsRequest generates requests for GetProcessDefinitions
func NewGetProcessDefinitionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/process-definitions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProcessDefinitionRequestWithBody generates requests for CreateProcessDefinition with any type of body
func NewCreateProcessDefinitionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/process-definitions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProcessDefinitionRequest generates requests for GetProcessDefinition
func NewGetProcessDefinitionRequest(server string, processDefinitionKey int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "processDefinitionKey", runtime.ParamLocationPath, processDefinitionKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/process-definitions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProcessInstanceRequest calls the generic CreateProcessInstance builder with application/json body
func NewCreateProcessInstanceRequest(server string, body CreateProcessInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProcessInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateProcessInstanceRequestWithBody generates requests for CreateProcessInstance with any type of body
func NewCreateProcessInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/process-instances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProcessInstancesRequest generates requests for GetProcessInstances
func NewGetProcessInstancesRequest(server string, params *GetProcessInstancesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/process-instances/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ProcessDefinitionKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "processDefinitionKey", runtime.ParamLocationQuery, *params.ProcessDefinitionKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProcessInstanceRequest generates requests for GetProcessInstance
func NewGetProcessInstanceRequest(server string, processInstanceKey int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "processInstanceKey", runtime.ParamLocationPath, processInstanceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/process-instances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetActivitiesRequest generates requests for GetActivities
func NewGetActivitiesRequest(server string, processInstanceKey int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "processInstanceKey", runtime.ParamLocationPath, processInstanceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/process-instances/%s/activities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobsRequest generates requests for GetJobs
func NewGetJobsRequest(server string, processInstanceKey int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "processInstanceKey", runtime.ParamLocationPath, processInstanceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/process-instances/%s/jobs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CompleteJobWithBodyWithResponse request with any body
	CompleteJobWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteJobResponse, error)

	CompleteJobWithResponse(ctx context.Context, body CompleteJobJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteJobResponse, error)

	// GetProcessDefinitionsWithResponse request
	GetProcessDefinitionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProcessDefinitionsResponse, error)

	// CreateProcessDefinitionWithBodyWithResponse request with any body
	CreateProcessDefinitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProcessDefinitionResponse, error)

	// GetProcessDefinitionWithResponse request
	GetProcessDefinitionWithResponse(ctx context.Context, processDefinitionKey int64, reqEditors ...RequestEditorFn) (*GetProcessDefinitionResponse, error)

	// CreateProcessInstanceWithBodyWithResponse request with any body
	CreateProcessInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProcessInstanceResponse, error)

	CreateProcessInstanceWithResponse(ctx context.Context, body CreateProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProcessInstanceResponse, error)

	// GetProcessInstancesWithResponse request
	GetProcessInstancesWithResponse(ctx context.Context, params *GetProcessInstancesParams, reqEditors ...RequestEditorFn) (*GetProcessInstancesResponse, error)

	// GetProcessInstanceWithResponse request
	GetProcessInstanceWithResponse(ctx context.Context, processInstanceKey int64, reqEditors ...RequestEditorFn) (*GetProcessInstanceResponse, error)

	// GetActivitiesWithResponse request
	GetActivitiesWithResponse(ctx context.Context, processInstanceKey int64, reqEditors ...RequestEditorFn) (*GetActivitiesResponse, error)

	// GetJobsWithResponse request
	GetJobsWithResponse(ctx context.Context, processInstanceKey int64, reqEditors ...RequestEditorFn) (*GetJobsResponse, error)
}

type CompleteJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CompleteJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompleteJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProcessDefinitionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProcessDefinitionsPage
}

// Status returns HTTPResponse.Status
func (r GetProcessDefinitionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProcessDefinitionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProcessDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ProcessDefinitionKey *string `json:"processDefinitionKey,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateProcessDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProcessDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProcessDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProcessDefinitionDetail
}

// Status returns HTTPResponse.Status
func (r GetProcessDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProcessDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProcessInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProcessInstance
}

// Status returns HTTPResponse.Status
func (r CreateProcessInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProcessInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProcessInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ProcessInstances *[]ProcessInstancePage `json:"processInstances,omitempty"`
		Total            *int                   `json:"total,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetProcessInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProcessInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProcessInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProcessInstance
}

// Status returns HTTPResponse.Status
func (r GetProcessInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProcessInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActivitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActivityPage
}

// Status returns HTTPResponse.Status
func (r GetActivitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobPage
}

// Status returns HTTPResponse.Status
func (r GetJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CompleteJobWithBodyWithResponse request with arbitrary body returning *CompleteJobResponse
func (c *ClientWithResponses) CompleteJobWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteJobResponse, error) {
	rsp, err := c.CompleteJobWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteJobResponse(rsp)
}

func (c *ClientWithResponses) CompleteJobWithResponse(ctx context.Context, body CompleteJobJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteJobResponse, error) {
	rsp, err := c.CompleteJob(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteJobResponse(rsp)
}

// GetProcessDefinitionsWithResponse request returning *GetProcessDefinitionsResponse
func (c *ClientWithResponses) GetProcessDefinitionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProcessDefinitionsResponse, error) {
	rsp, err := c.GetProcessDefinitions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProcessDefinitionsResponse(rsp)
}

// CreateProcessDefinitionWithBodyWithResponse request with arbitrary body returning *CreateProcessDefinitionResponse
func (c *ClientWithResponses) CreateProcessDefinitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProcessDefinitionResponse, error) {
	rsp, err := c.CreateProcessDefinitionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProcessDefinitionResponse(rsp)
}

// GetProcessDefinitionWithResponse request returning *GetProcessDefinitionResponse
func (c *ClientWithResponses) GetProcessDefinitionWithResponse(ctx context.Context, processDefinitionKey int64, reqEditors ...RequestEditorFn) (*GetProcessDefinitionResponse, error) {
	rsp, err := c.GetProcessDefinition(ctx, processDefinitionKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProcessDefinitionResponse(rsp)
}

// CreateProcessInstanceWithBodyWithResponse request with arbitrary body returning *CreateProcessInstanceResponse
func (c *ClientWithResponses) CreateProcessInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProcessInstanceResponse, error) {
	rsp, err := c.CreateProcessInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProcessInstanceResponse(rsp)
}

func (c *ClientWithResponses) CreateProcessInstanceWithResponse(ctx context.Context, body CreateProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProcessInstanceResponse, error) {
	rsp, err := c.CreateProcessInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProcessInstanceResponse(rsp)
}

// GetProcessInstancesWithResponse request returning *GetProcessInstancesResponse
func (c *ClientWithResponses) GetProcessInstancesWithResponse(ctx context.Context, params *GetProcessInstancesParams, reqEditors ...RequestEditorFn) (*GetProcessInstancesResponse, error) {
	rsp, err := c.GetProcessInstances(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProcessInstancesResponse(rsp)
}

// GetProcessInstanceWithResponse request returning *GetProcessInstanceResponse
func (c *ClientWithResponses) GetProcessInstanceWithResponse(ctx context.Context, processInstanceKey int64, reqEditors ...RequestEditorFn) (*GetProcessInstanceResponse, error) {
	rsp, err := c.GetProcessInstance(ctx, processInstanceKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProcessInstanceResponse(rsp)
}

// GetActivitiesWithResponse request returning *GetActivitiesResponse
func (c *ClientWithResponses) GetActivitiesWithResponse(ctx context.Context, processInstanceKey int64, reqEditors ...RequestEditorFn) (*GetActivitiesResponse, error) {
	rsp, err := c.GetActivities(ctx, processInstanceKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActivitiesResponse(rsp)
}

// GetJobsWithResponse request returning *GetJobsResponse
func (c *ClientWithResponses) GetJobsWithResponse(ctx context.Context, processInstanceKey int64, reqEditors ...RequestEditorFn) (*GetJobsResponse, error) {
	rsp, err := c.GetJobs(ctx, processInstanceKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobsResponse(rsp)
}

// ParseCompleteJobResponse parses an HTTP response from a CompleteJobWithResponse call
func ParseCompleteJobResponse(rsp *http.Response) (*CompleteJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompleteJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProcessDefinitionsResponse parses an HTTP response from a GetProcessDefinitionsWithResponse call
func ParseGetProcessDefinitionsResponse(rsp *http.Response) (*GetProcessDefinitionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProcessDefinitionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProcessDefinitionsPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateProcessDefinitionResponse parses an HTTP response from a CreateProcessDefinitionWithResponse call
func ParseCreateProcessDefinitionResponse(rsp *http.Response) (*CreateProcessDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProcessDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ProcessDefinitionKey *string `json:"processDefinitionKey,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProcessDefinitionResponse parses an HTTP response from a GetProcessDefinitionWithResponse call
func ParseGetProcessDefinitionResponse(rsp *http.Response) (*GetProcessDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProcessDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProcessDefinitionDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateProcessInstanceResponse parses an HTTP response from a CreateProcessInstanceWithResponse call
func ParseCreateProcessInstanceResponse(rsp *http.Response) (*CreateProcessInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProcessInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProcessInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProcessInstancesResponse parses an HTTP response from a GetProcessInstancesWithResponse call
func ParseGetProcessInstancesResponse(rsp *http.Response) (*GetProcessInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProcessInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ProcessInstances *[]ProcessInstancePage `json:"processInstances,omitempty"`
			Total            *int                   `json:"total,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProcessInstanceResponse parses an HTTP response from a GetProcessInstanceWithResponse call
func ParseGetProcessInstanceResponse(rsp *http.Response) (*GetProcessInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProcessInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProcessInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetActivitiesResponse parses an HTTP response from a GetActivitiesWithResponse call
func ParseGetActivitiesResponse(rsp *http.Response) (*GetActivitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActivitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActivityPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJobsResponse parses an HTTP response from a GetJobsWithResponse call
func ParseGetJobsResponse(rsp *http.Response) (*GetJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xYT3PbthP9Khj8fkdZlNtOD7o5tSeV2zSaOreMDiC5pOGQAAIs1SgaffcOQEr8B8qU",
	"LHs6OYkClgvse7tvAW5pJHMlBQg0dL6lJnqEnLnHmwj5muPGPistFWjk4GZClYu7DHIQ+GmjwA6h+6UG",
	"NRcp3U1opIEhxDdoZxOpc4Z0TmOGcIU8BzrpvwKly0XsdfgFNt5xpWUExtxCwgVHLsUfxw0XwiATEQyZ",
	"GWToC2l32LEMnyBCa7uHaMlS9wrLso8JnX/uAsYR8vbD/zUkdE7/F9TwBxX2wQH4ekmmNdt493Dcld3Y",
	"B0AWM2R0t/KEcC/DPsEXJ28/+wz2X96OunsZXpY1C+RbENay6DMnC4ENCLhASEHbF2WSGBiYM/w7+GZ8",
	"yC27BXcLyHjWRvJojF0HDzxXGThs+kJzW8X5LKerMXutlvJKWmV8ov6sQRsuxdnomcum4TC4b5Ca7TLt",
	"o8xKZav+9XsGK9JHvFvvm9ElmsqL28ZBVEAUOZ1/LoOwa1mMMkCI7bqgcy7s5ujKs4s105yFGfwusxj0",
	"SInqwPkqeXLg6vXzw3rkIpF2ZzGYSHOFrnDo33cPn8jNckESqUnGwytbjVcgUi4cpxxtydJ3yw9/kTs3",
	"Sj4qEDfLBW3UH51Nr6czp3QKBFOczunP09l0RidUMXx0kARPMnQPShqXRRZBZvdhy57+VlFqxXxCNXwt",
	"wOA7GW9KbRUIpboypTIeufeCJ1NWf4lDP+mfZOjPrV25AtcQ27yq7PzA1YaoC3ADRklhyiV+ml33Ub2X",
	"IalT1DoxRZ4zvWnESRh5cqEiS021CUNX1jioKuQqrqXKLpKCB7f3gH1ho71dzk6C8SSZK2XUYdWG4U9u",
	"kMiEVOGQZjhtUN4DkuyIdY2SD5qVFRV/UjnV6u14dIJ9y7M2MAflszM9tRmTLrMX5PNI5dx587jNzbKH",
	"MolBZXLTS9hbN0wYEfCPh5xnuRlI6GDri2Z3Up47edEsBwRtnC5zG5uVHDqhguUWAy9oXZ4mPo65wF9/",
	"qVmuDxertyyv6ow3ikNPWb2QMV51qWPK3SyyQ1e7lIaPPi3sG33z/HLI/7bee32ep/4XJ74+FgwTvieF",
	"VKeybotxo52K5TUxXfZrjge4D0ZU5eLgxF+UXwvQm2er8pQqnPg9V5etpq8YElZkSOez8W7cvczr5Hr2",
	"CpLgTfpFs/jOOVuWnbl7vpxQlMiycfem4bauCyG4SHsZdqy5D79zTlpu+18ndiek6into/kB5D/fPI5p",
	"yIO9VFkqWF8a+ryZYWtiIIMIISbhhnRQWsQX4zNo31yHqL2prX44VlvfOo8UZAOp4Qqsjdydj12mQXiZ",
	"21/4hji7t/M/HFv7z5tHiHLADFNkp88kx/oEvd5jWeiMzukjopoHQSpTlZtpojl+n4byW/mloPS27UDd",
	"OhHaFtmZbmj9avdvAAAA///XdpEZyhgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
